# -*- coding: utf-8 -*-
"""09_20101331_CSE221LabAssignmentNo02_Fall2022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U3I_dAWLcrOhG37j3xeagEyohBF5arNf
"""

#Task1
def insertion_sort(lst1,lst2):
    for i in range(0,len(lst1)-1):
        temp = lst1[i+1]
        j = i
        while j>=0:
            if lst1[j] < temp:
                lst1[j], lst1[j+1] = lst1[j+1], lst1[j]
                lst2[j], lst2[j + 1] = lst2[j + 1], lst2[j]
            else:
                break
            j = j-1
        lst1[j+1] = temp




input_file = open("input1", mode = "r")
outputfile = open("output1.txt", mode="w")

input_file_lst = []
for i in input_file:
    input_file_lst.append(i.strip())
input_file_lst = input_file_lst[1:]
student_id = [input_file_lst[0]]
marks = [input_file_lst[1]]
for i in student_id:
    student_id = i.split(" ")
for i in marks:
    marks = i.split(" ")
for i in range(0, len(student_id)):
    student_id[i] = int(student_id[i])
for i in range(0, len(marks)):
    marks[i] = int(marks[i])
insertion_sort(student_id,marks)
for i in student_id:
    print(i, end=" ", file=outputfile)

#Task2
def merge(A, p, q, r):
    n1, n2= q - p + 1, r - q
    L, R=[0]n1, [0]n2
    for i in range(0,n1): L[i]=A[p+i]
    for j in range(0,n2): R[j]=A[q+1+j]
    i,j,k = 0,0,p
    while(i<n1 and j<n2):
        if L[i]<=R[j]:
            A[k]=L[i]
            i, k=i+1, k+1
        elif L[i]>=R[j]:
            A[k]=R[j]
            j+=1
            k+=1
    if i>n1:
       while(j<n2):
            A[k]=R[j]
            j+=1
            k+=1
    else:
       while(i<n1):
            A[k]=L[i]
            i+=1
            k+=1

def mergeSort(A, p, r):
    if (p<r):
        q = int((p + r) / 2)
        mergeSort(A, p, q)
        mergeSort(A, q + 1, r)
        merge(A, p, q, r)
def file_io(input_file, output_file):
    input_file_lst = input_file.read().split('\n')
    lst_len = int(input_file_lst[0])
    array = input_file_lst[1].split(' ')
    array_int = []
    for i in array:
        array_int.append(int(i))
    mergeSort(array_int, 0, lst_len - 1)
    for i in array_int:
        print(i,end=" ", file=output_file)


input_file = open('input2', mode='r')
output_file= open('output2.txt', mode='w')
input_file_lst = input_file.read().split('\n')
lst_len = int(input_file_lst[0])
array = input_file_lst[1].split(' ')
array_int = []
for i in array:
    array_int.append(int(i))
mergeSort(array_int, 0, lst_len - 1)
for i in array_int:
    print(i,end=" ", file=output_file)

#Task3
def quickSort(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)
        quickSort(arr, low, pi-1)
        quickSort(arr, pi + 1, high)

def partition(arr, low, high):
    pivot = arr[high]
    i = low-1
    for j in range(low, high):
        if arr[j] < pivot:
            i = i+1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i+1], arr[high] = arr[high], arr[i+1]
    return i+1

inp = open('input3', mode='r')
out= open('output3.txt', mode='w')
input_file_lst = inp.read().split('\n')
lst_len = int(input_file_lst[0])
array = input_file_lst[1].split(' ')
array_int = []
for i in array:
    array_int.append(int(i))
quickSort(array_int, 0, lst_len-1)
for i in array_int:
    print(i, end=" ", file=out)
print(file=out)

#Task4
class Queue:
    def init(self):
        self.queue = []
        self.index = 0

    def showQueue(self):
        if len(self.queue) == 0:
            print("There's no queue", file=output_file)
        else:
            print("Current Queue is:",file=output_file)
            for i in range(self.index,len(self.queue)):
                if i == len(self.queue)-1:
                    print(self.queue[i],file=output_file)
                else:
                    print(self.queue[i], end=", ", file=output_file)
        print(file=output_file)
    def enqueue(self, patient):
        self.queue.append(patient)
        for i in range(len(self.queue) - 1):
            if self.queue[i] == "see doctor":
                continue
            for j in range(len(self.queue) - i - 1):
                if self.queue[j][4] > self.queue[j+1][4]:
                    temp = self.queue[j]
                    self.queue[j] = self.queue[j+1]
                    self.queue[j+1] = temp

    def dequeue(self):
        if len(self.queue) == 0 or self.index >= len(self.queue):
            print("Queue is empty",file=output_file)
        else:
            print("Dequeued", self.queue[self.index], file=output_file)
            self.index+=1

input_file = open("input4", mode='r')
output_file = open("output4", mode="w")

def bubbleSort(self,queue):
    for i in range(len(self.queue) - 1):
        if self.queue[i] == "see doctor":
            continue
        for j in range(len(self.queue) - i - 1):
            if self.queue[j][4] > self.queue[j+1][4]:
                self.queue[j], self.queue[j+1] = self.queue[j+1], self.queue[j]

array = []
for i in input_file:
    array.append(i.strip())

q1 = Queue()
for i in array:
    if i == "see doctor":
        continue
    else:
        q1.enqueue(i)
        print("Enqueued:", i, file=output_file)

q1.showQueue()
for i in array:
    if i == "see doctor":
        q1.dequeue()
        q1.showQueue()